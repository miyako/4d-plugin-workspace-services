/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Workspace Services
 #	author : miyako
 #	2016/01/27
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#if VERSIONMAC
//#define PathTypeSystem	3
#ifndef __LP64__
#include <Quicktime/Quicktime.h>
Ptr    gOldState = NULL;
BOOL gIsFullScreen = FALSE;
#endif
#include <CoreServices/CoreServices.h>

#pragma mark -

//bool IsProcessOnExit(){
//    C_TEXT name;
//    PA_long32 state, time;
//    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
//    CUTF16String procName(name.getUTF16StringPtr());
//    CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
//    return (!procName.compare(exitProcName));
//}

//void OnCloseProcess(){
//    if(IsProcessOnExit()){
//        FULL_SCREEN_END();
//    }
//}

NSString *_pathToURL(NSString *posix)
{	
	NSString *path = @"";
	
	if(posix){
        
		NSURL *item = [[NSURL alloc]initFileURLWithPath:posix];
		if(item){
			path = [item absoluteString];			
			[item release];		
		}
	}
	return path;
}

NSString *_pathToHFS(NSString *posix)
{	
	NSString *path = @"";
	
	if(posix){
		NSURL *item = [[NSURL alloc]initFileURLWithPath:posix];
		if(item){
			NSString *hfs = (NSString *)CFURLCopyFileSystemPath((CFURLRef)item, kCFURLHFSPathStyle);
			path = [hfs stringByAppendingString:@":"];
			[item release];
			[hfs release];
		}
	}
	return path;
}
#endif

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
//				case kCloseProcess :
//								OnCloseProcess();
//								break;
// --- Finder

		case 1 :
			FINDER_Perform_operation(pResult, pParams);
			break;

		case 2 :
			FINDER_Get_icon_for_file_type(pResult, pParams);
			break;

// --- Application

		case 3 :
			APPLICATION_Get_path(pResult, pParams);
			break;

		case 4 :
			APPLICATION_Launch(pResult, pParams);
			break;

		case 5 :
			APPLICATION_Launch_paths(pResult, pParams);
			break;

// --- File

		case 6 :
			FILE_Get_localized_name(pResult, pParams);
			break;

		case 7 :
			FILE_Open_with_application(pResult, pParams);
			break;

		case 8 :
			FILE_Get_application_name(pResult, pParams);
			break;

		case 9 :
			FILE_SET_ICON(pResult, pParams);
			break;

		case 10 :
			FILE_Get_icon(pResult, pParams);
			break;

// --- Dock

		case 11 :
			DOCK_SET_BADGE_LABEL(pResult, pParams);
			break;

		case 12 :
			DOCK_Get_icon(pResult, pParams);
			break;

		case 13 :
			DOCK_Get_badge_label(pResult, pParams);
			break;

		case 14 :
			DOCK_SET_ICON(pResult, pParams);
			break;

// --- Full Screen (QuickTime)

		case 15 :
			FULL_SCREEN_BEGIN(pResult, pParams);
			break;

		case 16 :
			FULL_SCREEN_END();
			break;

// --- Folder

		case 17 :
			FOLDER_GET_CONTENTS(pResult, pParams);
			break;

		case 18 :
			FOLDER_GET_SUBPATHS(pResult, pParams);
			break;

	}
}

// ------------------------------------ Finder ------------------------------------

void FINDER_Perform_operation(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	ARRAY_TEXT Param3;
	C_LONGINT Param4;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
    
    NSString *source = Param1.copyPath();
    NSString *destination = Param2.copyPath();   
	
    NSMutableArray *files = [[NSMutableArray alloc]init];
    
    for(unsigned int i = 1; i < Param3.getSize(); ++i){
        CUTF16String u;
        Param3.copyUTF16StringAtIndex(&u, i);
        C_TEXT t;
        t.setUTF16String(&u);
        NSString *s = t.copyUTF16String();
        [files addObject:s];
        [s release];
    }   
    
    NSInteger tag = 0;
    NSString *operation;

    switch (Param4.getIntValue()) {
        case OperationMove:
            operation = NSWorkspaceMoveOperation;
            break;
        case OperationCopy:
            operation = NSWorkspaceCopyOperation;            
            break;            
        case OperationLink:
            operation = NSWorkspaceLinkOperation;               
            break;   
        case OperationCompress:
            operation = NSWorkspaceCompressOperation;             
            break;
        case OperationDecompress:
            operation = NSWorkspaceDecompressOperation;             
            break;            
        case OperationEncrypt:
            operation = NSWorkspaceEncryptOperation;            
            break;   
        case OperationDecrypt:
            operation = NSWorkspaceDecryptOperation;              
            break;
        case OperationDestroy:
            operation = NSWorkspaceDestroyOperation;             
            break;            
        case OperationRecycle:
            operation = NSWorkspaceRecycleOperation;               
            break;   
        default:
            operation = NSWorkspaceDuplicateOperation;              
            break;              
    }
    
    returnValue.setIntValue([[NSWorkspace sharedWorkspace]performFileOperation:operation
                                                                       source:source
                                                                  destination:destination
                                                                        files:files
                                                                          tag:&tag]);
                                        
	returnValue.setReturn(pResult);
    
    [source release];    
    [destination release];    
    [files release];
}

void FINDER_Get_icon_for_file_type(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
	NSString *typeId = Param1.copyUTF16String();
	unsigned int fileType = Param2.getIntValue();
	
	NSString *fileUTI = NULL;
	NSImage *iconImage = NULL;
	
	switch (fileType) {
		case FileTypeMIME:
			fileUTI = (NSString *)UTTypeCopyPreferredTagWithClass(
																														UTTypeCreatePreferredIdentifierForTag(
																																																	kUTTagClassMIMEType,
																																																	(CFStringRef)typeId,
																																																	NULL),
																														kUTTagClassFilenameExtension);
			if(fileUTI){
				iconImage = [[NSWorkspace sharedWorkspace]iconForFileType:fileUTI];
				[fileUTI release];
			}
			break;
			
		case FileOSType:
			fileUTI = NSFileTypeForHFSTypeCode(UTGetOSTypeFromString((CFStringRef)typeId));
			if(fileUTI) iconImage = [[NSWorkspace sharedWorkspace]iconForFileType:fileUTI];
			break;
			
		case FileExtension:
			iconImage = [[NSWorkspace sharedWorkspace]iconForFileType:typeId];
			break;
			
		default:
			fileUTI = (NSString *)UTTypeCopyPreferredTagWithClass((CFStringRef)typeId, kUTTagClassFilenameExtension);
			if(fileUTI){
				iconImage = [[NSWorkspace sharedWorkspace]iconForFileType:fileUTI];
				[fileUTI release];
			}
			break;
	}
	
	if(iconImage)
	{
		//return picture without memory leak; avoid the use of - TIFFRepresentation
		NSRect imageRect = NSMakeRect(0, 0, iconImage.size.width , iconImage.size.height);
		CGImageRef image = [iconImage CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
		CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
		CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
		CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
		CGImageDestinationAddImage(destination, image, properties);
		CGImageDestinationFinalize(destination);
		PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
		*(PA_Picture*) pResult = picture;
		CFRelease(destination);
		CFRelease(properties);
		CFRelease(data);
	}

	[typeId release];
}

// ---------------------------------- Application ---------------------------------


void APPLICATION_Get_path(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    
    NSString *appId = Param1.copyUTF16String(); 
 	unsigned int pathType = Param2.getIntValue();  
    
    NSString *appPath = [[NSWorkspace sharedWorkspace]absolutePathForAppBundleWithIdentifier:appId];
    if(!appPath) appPath = [[NSWorkspace sharedWorkspace]fullPathForApplication:appId]; 
    
    if(appPath){
        
		switch (pathType){
			case PathTypePOSIX:
                returnValue.setUTF16String(appPath);
				break;
			case PathTypeURL:
                returnValue.setUTF16String(_pathToURL(appPath));
				break;					
            default :    
                returnValue.setUTF16String(_pathToHFS(appPath));
				break;     
        }
    } 

	returnValue.setReturn(pResult);
    
    [appId release];
}

void APPLICATION_Launch(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
    NSString *appId = Param1.copyUTF16String(); 
    NSString *appPath = [[NSWorkspace sharedWorkspace]absolutePathForAppBundleWithIdentifier:appId];
    if(!appPath) appPath = [[NSWorkspace sharedWorkspace]fullPathForApplication:appId]; 
    
    if(appPath){
        
        NSBundle *appBundle = [NSBundle bundleWithPath:appPath];
        
        if(appBundle){
            returnValue.setIntValue([[NSWorkspace sharedWorkspace]launchAppWithBundleIdentifier:[appBundle bundleIdentifier] 
                                                                                        options:Param2.getIntValue()
                                                                 additionalEventParamDescriptor:[NSAppleEventDescriptor nullDescriptor]
                                                                               launchIdentifier:nil]);
        }
    }
        
	returnValue.setReturn(pResult);

    [appId release];
}

void APPLICATION_Launch_paths(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	ARRAY_TEXT Param3;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
    
    NSString *appId = Param1.copyUTF16String(); 
    NSString *appPath = [[NSWorkspace sharedWorkspace]absolutePathForAppBundleWithIdentifier:appId];
    if(!appPath) appPath = [[NSWorkspace sharedWorkspace]fullPathForApplication:appId]; 
    
    if(appPath){
        
        NSBundle *appBundle = [NSBundle bundleWithPath:appPath];
        
        if(appBundle){
            
            NSMutableArray *urls = [[NSMutableArray alloc]init];
            
            for(unsigned int i = 1; i < Param3.getSize(); ++i){
                NSString *s = Param3.copyPathAtIndex(i);
                NSURL *url = [NSURL fileURLWithPath:s];
                if(url) 
					[urls addObject:url];
                [s release];
            }            
            
            
            returnValue.setIntValue([[NSWorkspace sharedWorkspace]openURLs:urls
                                                   withAppBundleIdentifier:[appBundle bundleIdentifier]
                                                                   options:Param2.getIntValue()
                                            additionalEventParamDescriptor:[NSAppleEventDescriptor nullDescriptor]
                                                         launchIdentifiers:nil]);
            [urls release];
        }
    } 
        
	returnValue.setReturn(pResult);

    [appId release];
}

// ------------------------------------- File -------------------------------------


void FILE_Get_localized_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
    
    NSString *fullPath = Param1.copyPath();      
    NSFileManager *defaultManager = [[NSFileManager alloc]init];	
	NSString *displayNameAtPath = [defaultManager displayNameAtPath:fullPath];
    
    returnValue.setUTF16String(displayNameAtPath);    
	returnValue.setReturn(pResult);
    
	[defaultManager release];	
	[fullPath release];	    
}

void FILE_Open_with_application(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
    
    NSString *fullPath = Param1.copyPath(); 
    NSString *appId = Param2.copyUTF16String(); 
    NSString *appPath = [[NSWorkspace sharedWorkspace]absolutePathForAppBundleWithIdentifier:appId];
    if(!appPath) appPath = [[NSWorkspace sharedWorkspace]fullPathForApplication:appId];        
    
    returnValue.setIntValue([[NSWorkspace sharedWorkspace]openFile:fullPath
                                                   withApplication:appPath 
                                                     andDeactivate:Param3.getIntValue()]);    
    

	returnValue.setReturn(pResult);
    
	[appId release];	      
	[fullPath release];	     
}

void FILE_Get_application_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;
    
	Param1.fromParamAtIndex(pParams, 1);
	
	NSString *fullPath = Param1.copyPath();	
    NSString *appName;
    NSString *fileType;
    
    if([[NSWorkspace sharedWorkspace]getInfoForFile:fullPath 
                                        application:&appName 
                                               type:&fileType]) returnValue.setUTF16String(appName);
    
	[fullPath release];
	
	returnValue.setReturn(pResult);
}

void FILE_SET_ICON(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);    

	PA_Picture p = *(PA_Picture *)(pParams[1]);
	CGImageRef cgImage = (CGImageRef)PA_CreateNativePictureForScreen(p);
	NSImage *iconImage = [[NSImage alloc]initWithCGImage:cgImage size:NSZeroSize];
	if(iconImage){
		
		NSString* fullPath = Param1.copyPath();
		
		[[NSWorkspace sharedWorkspace]setIcon:iconImage
																	forFile:fullPath
																	options:0];
		[fullPath release];
		[iconImage release];
	}
}

void FILE_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSString* fullPath = Param1.copyPath();	
	NSImage *icon = [[NSWorkspace sharedWorkspace]iconForFile:fullPath];
	
	if (icon)
	{
		//return picture without memory leak; avoid the use of - TIFFRepresentation
		NSRect imageRect = NSMakeRect(0, 0, icon.size.width , icon.size.height);
		CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
		CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
		CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
		CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
		CGImageDestinationAddImage(destination, image, properties);
		CGImageDestinationFinalize(destination);
		PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
		*(PA_Picture*) pResult = picture;
		CFRelease(destination);
		CFRelease(properties);
		CFRelease(data);
	}
	
	[fullPath release];
}

// ------------------------------------- Dock -------------------------------------


void DOCK_SET_BADGE_LABEL(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
    
	Param1.fromParamAtIndex(pParams, 1);
    NSString *badgeLabel = Param1.copyUTF16String();
    [[[NSApplication sharedApplication] dockTile]setBadgeLabel:badgeLabel];
    [badgeLabel release];
}

void DOCK_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	NSImage *icon = [[NSApplication sharedApplication] applicationIconImage];
	if (icon)
	{
		//return picture without memory leak; avoid the use of - TIFFRepresentation
		NSRect imageRect = NSMakeRect(0, 0, icon.size.width , icon.size.height);
		CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
		CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
		CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
		CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
		CGImageDestinationAddImage(destination, image, properties);
		CGImageDestinationFinalize(destination);
		PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
		*(PA_Picture*) pResult = picture;
		CFRelease(destination);
		CFRelease(properties);
		CFRelease(data);
	}
}

void DOCK_Get_badge_label(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
    
	NSString *badgeLabel = [[[NSApplication sharedApplication]dockTile]badgeLabel];
    returnValue.setUTF16String(badgeLabel);
    
	returnValue.setReturn(pResult);
}

void DOCK_SET_ICON(sLONG_PTR *pResult, PackagePtr pParams)
{
	PA_Picture p = *(PA_Picture *)(pParams[0]);
	CGImageRef cgImage = (CGImageRef)PA_CreateNativePictureForScreen(p);
	NSImage *iconImage = [[NSImage alloc]initWithCGImage:cgImage size:NSZeroSize];
	
	if(iconImage)
	{
		if((iconImage.size.width) && (iconImage.size.height))
		{
			[[NSApplication sharedApplication]setApplicationIconImage:iconImage];
		}else
		{
			[[NSApplication sharedApplication]setApplicationIconImage:nil];
		}
		[iconImage release];
	}else
	{
		[[NSApplication sharedApplication]setApplicationIconImage:nil];
	}
	CFRelease(cgImage);
}

// ---------------------------- Full Screen (QuickTime) ---------------------------


void FULL_SCREEN_BEGIN(sLONG_PTR *pResult, PackagePtr pParams)
{
#ifndef __LP64__
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
    
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
    
	short w = Param1.getIntValue();
	short h = Param2.getIntValue();
	BeginFullScreen(&gOldState, 0, &w, &h, 0, 0, Param3.getIntValue());
	gIsFullScreen = TRUE;
#endif
}

void FULL_SCREEN_END()
{
#ifndef __LP64__
	if(gIsFullScreen)
	{
		EndFullScreen(gOldState,0);
		gIsFullScreen = FALSE;
		gOldState = NULL;
	}
#endif
}

// ------------------------------------ Folder ------------------------------------

void FOLDER_GET_CONTENTS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT Param3;
    
	Param1.fromParamAtIndex(pParams, 1);
    Param2.setSize(1);
	
	NSString* path = Param1.copyPath();
    NSMutableString *fullPath = [path mutableCopy];	
    [path release];
   
	if(![fullPath hasSuffix:@"/"]) [fullPath appendString:@"/"];
	
	Param3.fromParamAtIndex(pParams, 3);
    
    NSFileManager *defaultManager = [[NSFileManager alloc]init];
    NSArray *subpaths = [defaultManager contentsOfDirectoryAtPath:fullPath error:NULL];	
    
	unsigned int pathType = Param3.getIntValue();    
    
	for(unsigned int i = 0 ; i < [subpaths count] ; ++i){
		
		switch (pathType){
			case PathTypePOSIX:
                Param2.appendUTF16String([fullPath stringByAppendingString:[subpaths objectAtIndex:i]]);
				break;
			case PathTypeURL:
                Param2.appendUTF16String(_pathToURL([fullPath stringByAppendingString:[subpaths objectAtIndex:i]]));
				break;					
            default :    
                Param2.appendUTF16String(_pathToHFS([fullPath stringByAppendingString:[subpaths objectAtIndex:i]]));
				break;
		}
	}	    
    
	Param2.toParamAtIndex(pParams, 2);
    
    [defaultManager release];
    [fullPath release];    
}

void FOLDER_GET_SUBPATHS(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT Param3;
    
	Param1.fromParamAtIndex(pParams, 1);
    Param2.setSize(1);
	
	NSString* path = Param1.copyPath();
    NSMutableString *fullPath = [path mutableCopy];
    [path release];
	
	if(![fullPath hasSuffix:@"/"]) [fullPath appendString:@"/"];
	
	Param3.fromParamAtIndex(pParams, 3);
    
    NSFileManager *defaultManager = [[NSFileManager alloc]init];
    NSArray *subpaths = [defaultManager subpathsOfDirectoryAtPath:fullPath error:NULL];	
    
	unsigned int pathType = Param3.getIntValue();    
    
	for(unsigned int i = 0 ; i < [subpaths count] ; ++i){
		
		switch (pathType){
			case PathTypePOSIX:
                Param2.appendUTF16String([fullPath stringByAppendingString:[subpaths objectAtIndex:i]]);
				break;
			case PathTypeURL:
                Param2.appendUTF16String(_pathToURL([fullPath stringByAppendingString:[subpaths objectAtIndex:i]]));
				break;					
            default :    
                Param2.appendUTF16String(_pathToHFS([fullPath stringByAppendingString:[subpaths objectAtIndex:i]]));
				break;
		}
	}	    
    
	Param2.toParamAtIndex(pParams, 2);
    
    [defaultManager release];
    [fullPath release]; 
}
